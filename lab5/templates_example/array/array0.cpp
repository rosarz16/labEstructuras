//////////////////////////////////////////////////////////////////////////////////////////////////
//#pragma implementation
//////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//include files
////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
#include "exception.hh"
//////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
namespace prima{
////////////////////////////////////////////////////////////////////
//Static Funtion Members
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
int array<T,0>::size(){
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
typename array<T,0>::size_type array<T,0>::max_size(){
	 return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
bool array<T,0>::empty(){
	return true;
}
////////////////////////////////////////////////////////////////////////////////////////////////////










////////////////////////////////////////////////////////////////////
//External Functions
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator<< (std::ostream& os, const array<T,0>& right){
	ASSERT(!right.empty(),"operator<<","empty array");
	return os;
}
////////////////////////////////////////////////////////////////////////////////////////////////////










} //namespace prima
////////////////////////////////////////////////////////////////////////////////////////////////////
